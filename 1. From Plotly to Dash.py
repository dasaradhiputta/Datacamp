
"""
1. From Plotly to Dash.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QN0zxgSYO3iin3_blc0J2hfGHi9z4XLO

# Sales in a Dash app

Your Plotly graphs are making a great impact at the company. However, it is difficult to share your work with other colleagues. You are constantly having to export your graphs as images or HTML files, and when there's a new version, you need to send many emails.

It would be better if you could serve up the graphs you create as a web application. You decide to try this out on your line graph of monthly sales by country.

The ecom_sales dataset is available, and line_fig has been recreated for you.

As a reminder, in this course, you must include __name__ inside dash.Dash() for the app to run, but in your own projects, you can leave this out.
"""

import dash
import dash_core_components as dcc
import pandas as pd
import plotly.express as px
ecom_sales = pd.read_csv('/usr/local/share/datasets/ecom_sales.csv')
ecom_sales = ecom_sales.groupby(['Year-Month','Country'])['OrderValue'].agg('sum').reset_index(name='Total Sales ($)')
line_fig = px.line(data_frame=ecom_sales, x='Year-Month', y='Total Sales ($)', title='Total Sales by Month', color='Country')

# Create the Dash app
app = dash.Dash(__name__)

# Set up the layout with a single graph
app.layout = dcc.Graph(
  id='my-line-graph',
  # Insert the line graph
  figure=line_fig)

# Set the app to run in development mode
if __name__ == '__main__':
    app.run_server(debug=True)

"""
## Combining HTML and Dash

Building on your recent graph work for the e-commerce company, you want to be able to show them both of the graphs in a single dashboard.

Luckily you have been working on your basic HTML positioning in Dash and have mastered the .Div() structural element. With these powerful tools in your hand, you can take your dashboard to the next level and create a Dash application to serve up both the line and bar graph you previously created. Since this is now a proper dashboard, it would be good to add a title at the top as well.

The line and bar graphs (line_graph and bar_graph) have been recreated for you.
"""

import dash
import dash_core_components as dcc
import dash_html_components as html
import pandas as pd
import plotly.express as px
ecom_sales = pd.read_csv('/usr/local/share/datasets/ecom_sales.csv')
ecom_line = ecom_sales.groupby(['Year-Month','Country'])['OrderValue'].agg('sum').reset_index(name='Total Sales ($)')
ecom_bar = ecom_sales.groupby('Country')['OrderValue'].agg('sum').reset_index(name='Total Sales ($)')
line_graph = px.line(data_frame=ecom_line, x='Year-Month', y='Total Sales ($)', title='Total Sales by Month', color='Country')
bar_graph = px.bar(data_frame=ecom_bar, x='Total Sales ($)', y='Country', orientation='h',title='Total Sales by Country')

# Create the Dash app
app = dash.Dash(__name__)

# Set up the layout using an overall div
app.layout = html.Div(
    children=[
  # Add a H1
  html.H1('Sales by Country & Over Time'),
  # Add both graphs
  dcc.Graph(id='line_graph', figure=line_graph),
  dcc.Graph(id='bar_graph', figure=bar_graph)
  ])

"""
## A draft sales dashboard

Given your great work so far with the e-commerce company, they have asked you to jump on board and help them completely replace their existing dashboards that require proprietary software and are costing the organization a mountain of money each month.

This won't be the final product; they want a rough draft of what is possible using Dash. They would like a line chart of their total sales each month, as well as a bar chart of their total sales in each country. It would be good to throw in a high-level summary statistic such as which month was the largest order volume.

Your task is to create a quick dashboard using Plotly plots stacked on top of each other.
"""

import dash
import dash_core_components as dcc
import dash_html_components as html
import plotly.express as px
import pandas as pd
ecom_sales = pd.read_csv('/usr/local/share/datasets/ecom_sales.csv')
ecom_line = ecom_sales.groupby('Year-Month')['OrderValue'].agg('sum').reset_index(name='Total Sales ($)')
line_fig = px.line(data_frame=ecom_line, x='Year-Month', y='Total Sales ($)', title='Total Sales by Month')
ecom_bar = ecom_sales.groupby('Country')['OrderValue'].agg('sum').reset_index(name='Total Sales ($)')
max_country = ecom_bar.sort_values(by='Total Sales ($)', ascending=False).loc[0]['Country']
bar_fig = px.bar(data_frame=ecom_bar, x='Total Sales ($)', y='Country', orientation='h', title='Total Sales by Country')

app = dash.Dash(__name__)

# Create the dash layout and overall div
app.layout = html.Div(children=[
    html.H1('Sales Figures'), 
    # Add a div containing the line figure
    html.Div(dcc.Graph(id='my-line-fig', figure=line_fig)), 
    # Add a div containing the bar figure
    html.Div(dcc.Graph(id='my-bar-fig', figure=bar_fig)), 
    # Add the H3
    html.H3(f'The largest country by sales was {max_country}')
    ])

if __name__ == '__main__':
    app.run_server(debug=True)

